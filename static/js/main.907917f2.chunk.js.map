{"version":3,"sources":["CanvasComponent.jsx","library.js","App.jsx","reportWebVitals.js","index.js"],"names":["PI","Math","cos","sin","Canvas","hexagoneCanvas","useRef","useState","hexagoneSize","setHexagoneSize","x","y","firstHexagoneCenter","hexagoneNumberInColumn","columnNumber","setcolumnNumber","canvasWidth","canvasHeight","drawHexagones","canvas","current","getContext","clearRect","width","height","clearCanvas","canvasID","center","i","drawGridColumn","drawGridOddColumn","drawGridEvenColumn","drawHex","coordHexSummitTt","getHexCornerCoord","getAllSumitCoordOfOneHex","ctx","beginPath","lineTo","stroke","fillStyle","color","floor","random","getRandomColor","fill","closePath","angle_rad","useEffect","ref","type","value","onChange","event","target","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.907917f2.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { getRandomColor } from \"./library\";\r\n\r\nimport \"./canvas.css\";\r\n\r\nconst PI = Math.PI;\r\nconst cos = Math.cos;\r\nconst sin = Math.sin;\r\n\r\nfunction Canvas() {\r\n  const hexagoneCanvas = useRef(null);\r\n\r\n  const [hexagoneSize, setHexagoneSize] = useState(20);\r\n  const [firstHexagoneCenter, setFirstHexagoneCenter] = useState({\r\n    x: 150,\r\n    y: 150,\r\n  });\r\n  const [hexagoneNumberInGrid, setHexagoneNumberInGrid] = useState(50);\r\n  const [hexagoneNumberInColumn, setHexagoneNumberInColumn] = useState(8);\r\n  const [columnNumber, setcolumnNumber] = useState(8);\r\n\r\n  const [canvasWidth, setCanvasWidth] = useState(800);\r\n  const [canvasHeight, setCanvasHeight] = useState(600);\r\n\r\n  //   const [hexagoneCanvas, setHexagoneCanvas] = useState({\r\n  //     canvasWidth,\r\n  //     canvasHeight,\r\n  //   });\r\n\r\n  useEffect(() => {\r\n    // Method to draw one hexagone at the intials coordinates\r\n    //this.drawHex2(this.canvasHex, { x: this.state.firstHexCenter.x, y: this.state.firstHexCenter.y });\r\n    // Method to draw a column of hexagone (WIP)\r\n    //this.drawGridColumn(this.canvasHex, { x: this.state.firstHexCenter.x, y: this.state.firstHexCenter.y });\r\n\r\n    drawHexagones();\r\n  }, [hexagoneSize, columnNumber]);\r\n\r\n  function clearCanvas() {\r\n    const canvas = hexagoneCanvas.current;\r\n    const context = canvas.getContext(\"2d\");\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n  }\r\n\r\n  function drawHexagones() {\r\n    clearCanvas();\r\n    drawGridOddColumn(firstHexagoneCenter);\r\n    drawGridEvenColumn(firstHexagoneCenter);\r\n  }\r\n\r\n  //Method to draw odd columns\r\n  function drawGridOddColumn(canvasID, center) {\r\n    for (let i = 0; i <= columnNumber / 2; i++) {\r\n      drawGridColumn({\r\n        x: firstHexagoneCenter.x + i * 3 * hexagoneSize,\r\n        y: firstHexagoneCenter.y,\r\n      });\r\n    }\r\n  }\r\n\r\n  //Method to draw even columns\r\n  function drawGridEvenColumn() {\r\n    for (let i = 0; i <= columnNumber / 2 - 1; i++) {\r\n      drawGridColumn({\r\n        x: firstHexagoneCenter.x + i * 3 * hexagoneSize + 1.5 * hexagoneSize,\r\n        y: firstHexagoneCenter.y + sin((60 * PI) / 180) * hexagoneSize,\r\n      });\r\n    }\r\n  }\r\n  //Method to draw a column\r\n  function drawGridColumn(center) {\r\n    for (let i = 0; i <= hexagoneNumberInColumn; i++) {\r\n      drawHex({\r\n        x: center.x,\r\n        y: i * 2 * sin((60 * PI) / 180) * hexagoneSize + center.y,\r\n      });\r\n    }\r\n  }\r\n\r\n  //Method to draw the hexagone\r\n  function drawHex(center) {\r\n    let coordHexSummitTt = getAllSumitCoordOfOneHex(center);\r\n    const ctx = hexagoneCanvas.current.getContext(\"2d\");\r\n    ctx.beginPath();\r\n    for (let i = 0; i <= 6; i++) {\r\n      //let point = this.Point(coordHexSummitTt[i][0], coordHexSummitTt[i][1]);\r\n      //ctx.moveTo(coordHexSummitTt[i][0], coordHexSummitTt[i][1]);\r\n      //ctx.lineTo(coordHexSummitTt[i + 1][0], coordHexSummitTt[i][1]);\r\n      ctx.lineTo(coordHexSummitTt[i][0], coordHexSummitTt[i][1]);\r\n    }\r\n    ctx.stroke();\r\n    ctx.fillStyle = getRandomColor();\r\n    ctx.fill();\r\n    ctx.closePath();\r\n  }\r\n\r\n  //New Method to calculate all hex point coordonate and draw (WIP) -> as to be tested\r\n  function getAllSumitCoordOfOneHex(center) {\r\n    let coordHexSummitTt = [];\r\n\r\n    for (let i = 0; i <= 6; i++) {\r\n      coordHexSummitTt[i] = [\r\n        getHexCornerCoord(center, i).x,\r\n        getHexCornerCoord(center, i).y,\r\n      ];\r\n    }\r\n    //this.drawLine(canvasID, { x: start.x, y: start.y }, { x: end.x, y: end.y });\r\n    return coordHexSummitTt;\r\n  }\r\n\r\n  //Method to calculate the coordinate of a sommit from the center\r\n  function getHexCornerCoord(center, i) {\r\n    let angle_deg = 60 * i;\r\n    let angle_rad = (PI / 180) * angle_deg;\r\n    let x = center.x + hexagoneSize * cos(angle_rad);\r\n    let y = center.y + hexagoneSize * sin(angle_rad);\r\n    return { x, y };\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <canvas\r\n        ref={hexagoneCanvas}\r\n        width={canvasWidth}\r\n        height={canvasHeight}\r\n      ></canvas>\r\n      <input\r\n        type=\"number\"\r\n        value={columnNumber}\r\n        onChange={(event) => {\r\n          setcolumnNumber(event.target.value);\r\n        }}\r\n      />\r\n      <input\r\n        type=\"number\"\r\n        value={hexagoneSize}\r\n        onChange={(event) => {\r\n          setHexagoneSize(event.target.value);\r\n        }}\r\n      />\r\n      <button onClick={drawHexagones}>Redraw</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Canvas;\r\n\r\n","export function getRandomColor() {\r\n  var letters = \"0123456789ABCDEF\";\r\n  var color = \"#\";\r\n  for (var i = 0; i < 6; i++) {\r\n    color += letters[Math.floor(Math.random() * 16)];\r\n  }\r\n  return color;\r\n}\r\n","import \"./App.css\";\r\nimport React from \"react\";\r\nimport Canvas from \"./CanvasComponent\";\r\n//import Canvas from \"./HexagoneGridGenerator\"\r\n\r\nexport function App() {\r\n\r\n  return (\r\n    <div>\r\n      <Canvas />\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}