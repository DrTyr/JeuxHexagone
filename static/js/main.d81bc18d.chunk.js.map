{"version":3,"sources":["library.js","HexagonGridCalculator.jsx","App.jsx","SvgGridGenerator.jsx","reportWebVitals.js","index.js"],"names":["getRandomColor","color","i","Math","floor","random","PI","cos","sin","getOnehexagonAllSummitCoordinate","hexagon","angle","coordSommit","x","coordCenter","size","y","generateEntireGrid","grid","firsthexagonCenter","hexagons","numberColumn","numberRow","hexagonSize","hexagonIndice","j","indice","coordInGrid","numberhexagonInGrid","generateAllTheHexagones","App","useState","setGrid","useEffect","console","log","width","height","map","hexagonCoordForSvg","coordList","getHexagonCoordPointInString","hexagonColor","hexagoneindiceForBalise","onClick","grid2","onTouchEnd","points","fill","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d81bc18d.chunk.js","sourcesContent":["export function getRandomColor() {\r\n  var letters = \"0123456789ABCDEF\";\r\n  var color = \"#\";\r\n  for (var i = 0; i < 6; i++) {\r\n    color += letters[Math.floor(Math.random() * 16)];\r\n  }\r\n  return color;\r\n}\r\n","//import React, { useState, useEffect, useRef } from \"react\";\r\nimport { getRandomColor } from \"./library\";\r\n\r\nconst PI = Math.PI;\r\nconst cos = Math.cos;\r\nconst sin = Math.sin;\r\n\r\n//Generate all summit coordonate, clockwise, starting with the East one\r\nfunction getOnehexagonAllSummitCoordinate(hexagon) {\r\n    for (let i = 0; i <= 6; i++) {\r\n        let angle = (PI / 180) * 60 * i;\r\n        hexagon.coordSommit.x[i] =\r\n            hexagon.coordCenter.x + hexagon.size * cos(angle);\r\n        hexagon.coordSommit.y[i] =\r\n            hexagon.coordCenter.y + hexagon.size * sin(angle);\r\n    }\r\n    return hexagon.coordSommit;\r\n}\r\n\r\nfunction generateAllTheHexagones(grid) {\r\n\r\n    let hexagonIndice = 0;\r\n\r\n    for (let i = 0; i < grid.numberRow; i++) {\r\n\r\n        grid.hexagons[i] = [];\r\n\r\n        for (let j = 0; j < grid.numberColumn; j++) {\r\n\r\n            let hexagon = {\r\n                indice: 0,\r\n                coordInGrid: { x: 0, y: 0 },\r\n                coordSommit: { x: [], y: [] },\r\n                coordCenter: { x: 0, y: 0 },\r\n                size: grid.hexagonSize,\r\n                color: \"\",\r\n            };\r\n\r\n            //Testing if drawing odd or even column i\r\n            if (i % 2 === 1) {\r\n                hexagon.coordCenter.x =\r\n                    grid.firsthexagonCenter.x +\r\n                    i * 1.5 * hexagon.size;\r\n                hexagon.coordCenter.y =\r\n                    grid.firsthexagonCenter.y +\r\n                    2 * j * sin((60 * PI) / 180) * hexagon.size +\r\n                    sin((60 * PI) / 180) * hexagon.size;\r\n                //hexagon.color = \"red\"\r\n            } else {\r\n                hexagon.coordCenter.x =\r\n                    grid.firsthexagonCenter.x +\r\n                    i * 1.5 * hexagon.size;\r\n                hexagon.coordCenter.y = grid.firsthexagonCenter.y +\r\n                    j * 2 * sin((60 * PI) / 180) * hexagon.size;\r\n                //hexagon.color = \"green\"\r\n            }\r\n\r\n            hexagon.coordSommit = getOnehexagonAllSummitCoordinate(hexagon);\r\n\r\n            hexagon.coordInGrid = { x: i, y: j };\r\n\r\n            hexagon.indice = hexagonIndice++;\r\n\r\n            hexagon.color = getRandomColor();\r\n\r\n            grid.numberhexagonInGrid++;\r\n            grid.hexagons[i][j] = hexagon;\r\n        }\r\n    }\r\n\r\n    return grid;\r\n\r\n}\r\n\r\nfunction generatePath(grid) {\r\n\r\n\r\n\r\n\r\n    return grid;\r\n}\r\n\r\n//Function the generate the Grid as object gridObject of object hexagonObject\r\nexport function generateEntireGrid() {\r\n\r\n    let grid = {\r\n        firsthexagonCenter: { x: 150, y: 150 },\r\n        hexagons: [],\r\n        numberColumn: 10,\r\n        numberRow: 10,\r\n        hexagonSize: 20\r\n        //numberhexagonInGrid: this.numberhexagonInColumn * this.numberhexagonInRow\r\n    };\r\n\r\n    grid = generateAllTheHexagones(grid);\r\n\r\n    return grid;\r\n\r\n}","import \"./App.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\n//import Canvas from \"./CanvasGridGenerator\";\r\nimport { getHexagonCoordPointInString } from \"./SvgGridGenerator\";\r\nimport { generateEntireGrid } from \"./HexagonGridCalculator\";\r\nimport { getRandomColor } from \"./library\";\r\n\r\nexport function App() {\r\n\r\n  const [grid, setGrid] = useState(generateEntireGrid());\r\n\r\n  // let grid = generateEntireGrid();\r\n  // let hexagonCoordForSvg = getHexagonCoordPointInString(grid, 0, 0);\r\n  // let hexagonColor = grid.hexagons[0][0].color;\r\n\r\n  useEffect(() => {\r\n\r\n    console.log(\"REDRAW YOUHOU\")\r\n\r\n  }, [grid]);\r\n\r\n  function prepareHexagonesForSVG() {\r\n\r\n\r\n    //return grid.hexagons.map((hexagons, i) => hexagons.map((hexagon, j) => {\r\n    return grid.hexagons.map((hexagons) => hexagons.map((hexagon) => {\r\n\r\n      let hexagonCoordForSvg = getHexagonCoordPointInString(hexagon);\r\n\r\n      //let hexagonColor = grid.hexagons[i][j].color;\r\n      let hexagonColor = hexagon.color;\r\n\r\n      let hexagoneindiceForBalise = `indice${hexagon.indice}`\r\n\r\n      return <polygon onClick={() => {\r\n        let grid2 = { ...grid };\r\n        grid2.hexagons[hexagon.coordInGrid.x][hexagon.coordInGrid.y].color = getRandomColor();\r\n        setGrid(grid2);\r\n      }} onTouchEnd={() => { console.log(\"test touch\") }} key={hexagoneindiceForBalise} points={hexagonCoordForSvg} fill={hexagonColor} />\r\n\r\n    }))\r\n\r\n  }\r\n\r\n  //Exercie\r\n\r\n\r\n  return (\r\n    <div>\r\n      {/* <Canvas /> */}\r\n      <svg width=\"1000\" height=\"1000\">\r\n        {/* <circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"green\" stroke-width=\"4\" fill=\"red\" /> */}\r\n        {/* <polygon points={hexagoneCoordForSvg} fill={hexagonColor} /> */}\r\n\r\n        {prepareHexagonesForSVG()}\r\n\r\n      </svg>\r\n    </div>\r\n\r\n\r\n  );\r\n\r\n}\r\n\r\nexport default App;\r\n\r\n","\r\n\r\nexport function getHexagonCoordPointInString(hexagon) {\r\n\r\n    let coordInString = \"\";\r\n    let coordList = hexagon.coordSommit;\r\n\r\n    //coordInString = coordList.toString()\r\n\r\n    // `${hello} ${bob}`\r\n\r\n    coordInString =\r\n        `${coordList.x[0]},${coordList.y[0]} \r\n         ${coordList.x[1]},${coordList.y[1]} \r\n         ${coordList.x[2]},${coordList.y[2]} \r\n         ${coordList.x[3]},${coordList.y[3]} \r\n         ${coordList.x[4]},${coordList.y[4]} \r\n         ${coordList.x[5]},${coordList.y[5]}`;\r\n\r\n\r\n    return coordInString;\r\n\r\n}\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}